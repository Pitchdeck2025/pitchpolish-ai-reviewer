import streamlit as st
from presentation_parser import extract_pptx_text
from feedback_engine import analyze_slide
from design_checks import run_design_checks
from docx import Document
import fitz  # PyMuPDF
from PIL import Image
import pytesseract
import os
import tempfile

st.markdown("""
    <style>
    h1 {
        font-family: 'Questrial', sans-serif;
        font-weight: 700;
    }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Questrial&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

st.title("📊 Pitch Deck Labs: AI Presentation Reviewer")

desc = st.text_area(
    "What’s the purpose of this presentation? (e.g. Introduction, audience, fundraising, sales pitch, internal update etc)",
    help="This helps us tailor the feedback with the right tone and impact."
)

st.caption("⚠️ This tool provides automated feedback generated by AI and is intended for general guidance only.")

uploaded_file = st.file_uploader(
    "Upload your presentation file (PPTX, PDF, DOCX, JPG, PNG)",
    type=["pptx", "pdf", "docx", "jpg", "jpeg", "png"]
)
google_slide_link = st.text_input("Or paste your Google Slides share link")

if uploaded_file:
    with st.spinner("Analyzing..."):
        slides = []

        file_name = uploaded_file.name.lower()
        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            tmp_file.write(uploaded_file.read())
            tmp_path = tmp_file.name

        if file_name.endswith(".pptx"):
            slides = extract_pptx_text(tmp_path)

        elif file_name.endswith(".pdf"):
            doc = fitz.open(tmp_path)
            for i, page in enumerate(doc):
                text = page.get_text().strip()
                if text:
                    slides.append({
                        "slide_number": i + 1,
                        "title": text.split('\n')[0],
                        "body": "\n".join(text.split('\n')[1:])
                    })

        elif file_name.endswith(".docx"):
            doc = Document(tmp_path)
            paragraphs = [p.text.strip() for p in doc.paragraphs if p.text.strip()]
            for i, chunk in enumerate(paragraphs):
                slides.append({
                    "slide_number": i + 1,
                    "title": chunk[:40] + "..." if len(chunk) > 40 else chunk,
                    "body": chunk
                })

        elif file_name.endswith((".jpg", ".jpeg", ".png")):
            image = Image.open(tmp_path)
            text = pytesseract.image_to_string(image)
            slides.append({
                "slide_number": 1,
                "title": text.split('\n')[0],
                "body": "\n".join(text.split('\n')[1:])
            })

        os.unlink(tmp_path)

        for slide in slides:
            st.markdown(f"### Slide {slide['slide_number']}")
            st.markdown(f"**Title:** {slide['title']}")
            st.markdown(f"**Body:** {slide['body']}")

            feedback = analyze_slide(slide, desc)
            st.markdown(f"🧠 **AI Content Feedback:**\n{feedback}")

            design_tips = run_design_checks(slide)
            st.markdown(f"🎨 **Design Feedback:**\n{design_tips}")